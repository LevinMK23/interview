package com.alx.task;

import java.util.List;

public class Task2 {

    /**
     * Парковка формально бесконечная, но две машины в одно и то же время не могут
     * находиться в одном слоте парковки одновременно.
     * Например если первая машина заехала во время 1 и выедет во время 5, то
     * другая машина сможет заехать на это же место не ранее времени 6.
     * Но при этом вторая машина может занять на парковке другое место.
     * Необходимо определить какое минимально возможное количество парковочных мест
     * должна иметь парковка, что бы суметь разместить в себе весь поток машин.
     * <p>
     * Пример 1:
     * Input: [(1, 5), (7, 11), (6, 10)], Output: 2
     * [---]---------
     * ------[---]---
     * ----[----]----
     * <p>
     * Пример 2:
     * Input: [(1, 5), (7, 11), (13, 15)], Output: 1
     * [---]----------
     * ------[---]----
     * ------------[-]
     * <p>
     * Задача имеет множество решений.
     * Особое внимание стоит уделить сложности алгоритма по времени и памяти
     * Решение за полиномиальное время - является не лучшим решением
     * */
    public static int getMinParkingCapacity(List<Interval> carsStream) {
        return 0;
    }

}
